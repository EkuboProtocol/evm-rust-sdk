use crate::math::uint::U256;

pub fn exp2(x: u128) -> u128 {
    // x must be less than 0x400000000000000000 == 64 << 64 (overflow check)
    assert!(x < 0x400000000000000000, "Overflow");

    // Start with 0x80000000000000000000000000000000 (i.e. 2^127)
    let mut result = U256::one() << 127;

    macro_rules! mul_shift {
        ($mask:expr, $factor:expr) => {
            if (x & $mask) != 0 {
                result = (result * $factor) >> 128;
            }
        };
    }

    // Each branch multiplies result by a precomputed constant if the corresponding bit is set.
    mul_shift!(
        0x8000000000000000,
        U256([12896923290648804670, 7640891576956012808, 1, 0])
    );
    mul_shift!(
        0x4000000000000000,
        U256([10185530680776453612, 3490255227380126430, 1, 0])
    );
    mul_shift!(
        0x2000000000000000,
        U256([17854737389604993311, 1669572981167730125, 1, 0])
    );
    mul_shift!(
        0x1000000000000000,
        U256([10057302232697242467, 816707133613602345, 1, 0])
    );
    mul_shift!(
        0x800000000000000,
        U256([8958942473441515517, 403931097166463918, 1, 0])
    );
    mul_shift!(
        0x400000000000000,
        U256([17855306115364535784, 200871872941133542, 1, 0])
    );
    mul_shift!(
        0x200000000000000,
        U256([5361163942339934783, 100163996173424344, 1, 0])
    );
    mul_shift!(
        0x100000000000000,
        U256([3002515481205445955, 50014196964519265, 1, 0])
    );
    mul_shift!(
        0x80000000000000,
        U256([18381954890662373275, 24990171141283489, 1, 0])
    );
    mul_shift!(
        0x40000000000000,
        U256([7863777292665987087, 12490856599448656, 1, 0])
    );
    mul_shift!(
        0x20000000000000,
        U256([2935407722259146207, 6244371414720417, 1, 0])
    );
    mul_shift!(
        0x10000000000000,
        U256([4099144763823068965, 3121921530820282, 1, 0])
    );
    mul_shift!(
        0x8000000000000,
        U256([7830867710921767997, 1560894726863213, 1, 0])
    );
    mul_shift!(
        0x4000000000000,
        U256([15030865137112770483, 780430854493329, 1, 0])
    );
    mul_shift!(
        0x2000000000000,
        U256([6072397496287043622, 390211300099399, 1, 0])
    );
    mul_shift!(
        0x1000000000000,
        U256([439311289473205244, 195104618273796, 1, 0])
    );
    mul_shift!(
        0x800000000000,
        U256([3381501736036650923, 97552051194286, 1, 0])
    );
    mul_shift!(
        0x400000000000,
        U256([11878183186495682505, 48775961111660, 1, 0])
    );
    mul_shift!(
        0x200000000000,
        U256([436289341605138797, 24387964434481, 1, 0])
    );
    mul_shift!(
        0x100000000000,
        U256([15706463035261523811, 12193978186905, 1, 0])
    );
    mul_shift!(
        0x80000000000,
        U256([10951006159863813672, 6096988085869, 1, 0])
    );
    mul_shift!(
        0x40000000000,
        U256([100320500613761579, 3048493791039, 1, 0])
    );
    mul_shift!(
        0x20000000000,
        U256([10331567486136386213, 1524246832545, 1, 0])
    );
    mul_shift!(
        0x10000000000,
        U256([5442291021268196350, 762123400529, 1, 0])
    );
    mul_shift!(
        0x8000000000,
        U256([14320987186005390063, 381061696328, 1, 0])
    );
    mul_shift!(
        0x4000000000,
        U256([7754798478847538042, 190530847180, 1, 0])
    );
    mul_shift!(0x2000000000, U256([4025998895411732230, 95265423344, 1, 0]));
    mul_shift!(
        0x1000000000,
        U256([11273524327873463545, 47632711610, 1, 0])
    );
    mul_shift!(0x800000000, U256([17175265786997884963, 23816355789, 1, 0]));
    mul_shift!(0x400000000, U256([2248886808180014672, 11908177891, 1, 0]));
    mul_shift!(0x200000000, U256([11068971934550065103, 5954088944, 1, 0]));
    mul_shift!(0x100000000, U256([1103089072964130132, 2977044472, 1, 0]));
    mul_shift!(0x80000000, U256([17890439386703286701, 1488522235, 1, 0]));
    mul_shift!(0x40000000, U256([17891629424345511116, 744261117, 1, 0]));
    mul_shift!(0x20000000, U256([18099946172563701162, 372130558, 1, 0]));
    mul_shift!(0x10000000, U256([9032662942166067630, 186065279, 1, 0]));
    mul_shift!(0x8000000, U256([13735375971908885710, 93032639, 1, 0]));
    mul_shift!(0x4000000, U256([16089978138801990413, 46516319, 1, 0]));
    mul_shift!(0x2000000, U256([17268090635253964293, 23258159, 1, 0]));
    mul_shift!(0x1000000, U256([17857349736731306316, 11629079, 1, 0]));
    mul_shift!(0x800000, U256([18152030000782816061, 5814539, 1, 0]));
    mul_shift!(0x400000, U256([18299382811136780613, 2907269, 1, 0]));
    mul_shift!(0x200000, U256([18373062385895815308, 1453634, 1, 0]));
    mul_shift!(0x100000, U256([9186530928816069952, 726817, 1, 0]));
    mul_shift!(0x80000, U256([13816637435229851358, 363408, 1, 0]));
    mul_shift!(0x40000, U256([6908318701106685822, 181704, 1, 0]));
    mul_shift!(0x20000, U256([3454159346426282946, 90852, 1, 0]));
    mul_shift!(0x10000, U256([1727079672181376481, 45426, 1, 0]));
    mul_shift!(0x8000, U256([863539835832746992, 22713, 1, 0]));
    mul_shift!(0x4000, U256([9655141954706663992, 11356, 1, 0]));
    mul_shift!(0x2000, U256([4827570977337210668, 5678, 1, 0]));
    mul_shift!(0x1000, U256([2413785488664575002, 2839, 1, 0]));
    mul_shift!(0x800, U256([10430264781186055726, 1419, 1, 0]));
    mul_shift!(0x400, U256([14438504427447551775, 709, 1, 0]));
    mul_shift!(0x200, U256([16442624250578488721, 354, 1, 0]));
    mul_shift!(0x100, U256([8221312125289228617, 177, 1, 0]));
    mul_shift!(0x80, U256([13334028099499386180, 88, 1, 0]));
    mul_shift!(0x40, U256([6667014049749692106, 44, 1, 0]));
    mul_shift!(0x20, U256([3333507024874845807, 22, 1, 0]));
    mul_shift!(0x10, U256([1666753512437422842, 11, 1, 0]));
    mul_shift!(0x8, U256([10056748793073487213, 5, 1, 0]));
    mul_shift!(0x4, U256([14251746433391519410, 2, 1, 0]));
    mul_shift!(0x2, U256([7125873216695759704, 1, 1, 0]));
    mul_shift!(0x1, U256([12786308645202655659, 0, 1, 0]));

    // Final adjustment: shift right by 63 - (x >> 64). (x >> 64) is the integer part.
    result >>= 63 - (x >> 64);

    result.as_u128()
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_exp2_cases() {
        assert_eq!(exp2(0), 1 << 64);
        assert_eq!(exp2(1 << 64), 2 << 64);
        assert_eq!(exp2(2 << 64), 4 << 64);
        assert_eq!(exp2(3 << 64), 8 << 64);
        assert_eq!(exp2(63 << 64), 9223372036854775808 << 64);
    }
}
